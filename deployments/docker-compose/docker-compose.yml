version: '3.8'

# Docker-compose is a tool used to orchestrate the deployment of services.
# We can define and run multi-container docker applications.

# https://docs.docker.com/network/
# networks are used to connect services through IP.
# The overlay driver is used because this compose file should
#   be compatbile for multiple ndoes spanning different networks.
#   The "overlay" network lays ontop of the host and allows a
#   docker swarm to have interconnected nodes.
# The default driver "bridge" was previously used is because for 
#   a simple compose configuration "overlay" is not required:
#   "bridge network is a Link Layer device which forwards traffic between network segments"
#   https://docs.docker.com/network/bridge/
networks:
  # Edge networks are the outer preimeter nodes of the network.
  # These nodes are "fully" accessible to the public through eg. HTTP, grpc, and so on.
  edge_net:
    driver: overlay
  # In contrast to the "edge"-network the "backend" is not directly accessible to the public
  # for the public to access the backend they are most ofently required to access it though
  # a reverse proxy found on the "edge"-network
  backend_net:
    driver: overlay

services:
  nginx:
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    image: nginx:latest
    restart: always
    depends_on:
      - api_service
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/nginx.conf:/etc/nginx/ssl.conf
      - ./nginx/mime.types:/etc/nginx/mime.types
      - ./nginx/proxy.conf:/etc/nginx/proxy.conf
      - ./nginx/fastcgi.conf:/etc/nginx/fastcgi.conf
      - ./nginx/logs:/etc/nginx/logs
      - ./data/nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - /tmp/acme_challenge:/tmp/acme_challenge
#     - ./nginx/certs/localhost.crt:/etc/nginx/certs/localhost.crt
#     - ./nginx/certs/localhost.key:/etc/nginx/certs/localhost.key
#      - ./nginx/cache/:/etc/nginx/cache
    links:
      - certbot
    ports:
      - 80:80
      - 443:443
    env_file:
      - ./nginx/environment.env
    networks:
      - edge_net
      - backend_net
  certbot:
    ports:
      - '2020:2020'
    expose:
      - '2020'
        
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes: 
        - ./data/certbot/conf:/etc/letsencrypt
        - /tmp/acme_challenge:/tmp/acme_challenge
  api_service:
    image: docker-example:latest
    # When the api exits then it is restarted
    restart: always
    # Port mapping from the port "8080" on the host to "8080" in the container
    ports:
      - 8080:8080
    networks:
      - backend_net
    env_file:
      - ./api/environment.env
